What happens when you initialize a repository? Why do you need to do it?

Git creates a hidden directory called .git that contains the repository history 
metadata from its creation. If you don't do it, you have no way of saving commits.

********************************************************************************

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is an intermediate place between the working directory and the 
repository. Unlike the repository it doesn't keep track of file history. It's 
more akin to a subset of the files present in the working directory (although 
it's probably just a list of filenames, not a copy of the files themselves, that 
wouldn't make sense).

The staging area's value comes from providing a way to select the files to commit.
This makes it easy to commit in small logical units, even if other files are 
still in progress. There might also be intermediate files present that will not 
be committed at all but are still needed for further development.
Without the staging are, each commit would require serious file cleaning before 
being possible, making the process awkward and labour-intensive. Commits would 
then only be done at the end of big units of work, which would defeat the purpose.

********************************************************************************

How can you use the staging area to make sure you have one commit per logical
change?

Instead of committing everything, you can pick and chose the files that 
represent a single logical change, stage them and commit them, before doing the 
same for the rest.

I think there are limits to the technique though: It requires logically separate 
changes to take place in different files. Often you will be developing 
something, come across a small bug in the file you're working in and fix it 
without a second thought. Then you have two logical changes in the same file 
and you can't split them into separate commits. You would have to be very 
careful and create a separate branch for fixing the bug instead.

Also, if logically separate changes are located in separate files, it's 
unlikely you wrote them at the same time. Why let them accumulate? Just commit 
after each change. The only case I can think of that makes sense is if you are 
doing exploratory work, like getting a prototype together. Still, why not commit
as you go?

********************************************************************************

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

- When you need to maintain several versions of the code in parallel, e.g. when
some users have v1, some v2 and others v3 of the product. Or more simply when 
you have a development version and a production version.
- When different users need alternative version of your code, as in the 
translation example. You might not want to ship everything to everybody.
- When you want to experiment.
- To cater for priority changes, e.g. you are working on something and suddenly
you need to drop everything to work on an urgent bug fix.

********************************************************************************

How do the diagrams help you visualize the branch structure?

The diagrams show how each commit is related to the others through their parent
relationship. All the commits in a branch are displayed on the same line with 
the branch name at the tip of the branch. This way it is easy to see how commits
are organised in branches and how they relate to each other.

********************************************************************************

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The branches are merged together as a new commit into the currently checked out 
branch. The commit is shown as having two parents because it stores information
about both parents. Therefore all commits from both branches can be accessed 
from the merge commit.

********************************************************************************


*** Prompts ***
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
